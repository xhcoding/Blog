<svg id="kity_svg_6" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1383" height="738" style="background: rgb(251, 251, 251); visibility: visible;" viewBox="0 0 1383 738"><defs id="kity_defs_7"><linearGradient id="kity_linearGradient_17" x1="0" y1="0" x2="0" y2="1"><stop id="kity_stop_18" offset="0" stop-color="rgb(255, 255, 255)"></stop><stop id="kity_stop_19" offset="1" stop-color="rgb(204, 204, 204)"></stop></linearGradient><marker id="kity_marker_4" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_5" fill="rgb(123, 115, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker><marker id="kity_marker_2" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_3" fill="rgb(123, 115, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker></defs><g id="kity_g_8"><g id="minder1" text-rendering="geometricPrecision"><g id="minder_connect_group1"><path id="kity_path_31" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M117,369.5A214.5,336,0,0,1,331.5,33.5"></path><path id="kity_path_41" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M445.5,33.5C465.5,33.5,465.5,33.5,485.5,33.5"></path><path id="kity_path_49" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M117,369.5A214.5,220,0,0,1,331.5,149.5"></path><path id="kity_path_57" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M457.5,149.5C477.5,149.5,477.5,97.5,497.5,97.5"></path><path id="kity_path_65" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M457.5,149.5C477.5,149.5,477.5,149.5,497.5,149.5"></path><path id="kity_path_73" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M457.5,149.5C477.5,149.5,477.5,201.5,497.5,201.5"></path><path id="kity_path_81" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M117,369.5A214.5,50,0,0,0,331.5,419.5"></path><path id="kity_path_89" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M482.5,419.5C502.5,419.5,502.5,263.5,522.5,263.5"></path><path id="kity_path_97" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M482.5,419.5C502.5,419.5,502.5,315.5,522.5,315.5"></path><path id="kity_path_105" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M482.5,419.5C502.5,419.5,502.5,445.5,522.5,445.5"></path><path id="kity_path_113" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M719.5,445.5C739.5,445.5,739.5,367.5,759.5,367.5"></path><path id="kity_path_121" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M719.5,445.5C739.5,445.5,739.5,419.5,759.5,419.5"></path><path id="kity_path_129" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M719.5,445.5C739.5,445.5,739.5,471.5,759.5,471.5"></path><path id="kity_path_137" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M719.5,445.5C739.5,445.5,739.5,523.5,759.5,523.5"></path><path id="kity_path_145" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M482.5,419.5C502.5,419.5,502.5,575.5,522.5,575.5"></path><path id="kity_path_153" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M117,369.5A214.5,270,0,0,0,331.5,639.5"></path><path id="kity_path_161" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M459.5,639.5C479.5,639.5,479.5,639.5,499.5,639.5"></path><path id="kity_path_169" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M117,369.5A214.5,336,0,0,0,331.5,705.5"></path><path id="kity_path_177" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M488.5,705.5C508.5,705.5,508.5,705.5,528.5,705.5"></path></g><g id="minder_node1"><path id="kity_path_39" fill="rgba(0, 0, 0, .25)" stroke="none" d="M45.5,352.5h222a22,22,0,0,1,22,22v0a22,22,0,0,1,-22,22h-222a22,22,0,0,1,-22,-22v0a22,22,0,0,1,22,-22z" display="none"></path><path id="node_outline1" fill="rgb(123, 115, 191)" stroke="rgb(61, 57, 96)" d="M25.5,349.5h183a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-183a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text1" fill="white"><text id="kity_text_22" text-rendering="inherit" font-size="16" dy=".8em" y="361.5" x="44.5">新手易学，老兵易用</text></g></g><g id="kity_g_12"><path id="kity_path_13" fill="none" stroke="none" d="M44.5,369.5h0v0h0z"></path></g><g id="kity_g_14"><path id="kity_path_15" fill="none" stroke="none" d="M44.5,369.5h0v0h0z"></path><path id="kity_path_16" fill="none" stroke="none"></path></g><g id="minder_node2"><path id="kity_path_38" fill="rgba(0, 0, 0, .25)" stroke="none" d="M352.5,25.5h91a10,10,0,0,1,10,10v6a10,10,0,0,1,-10,10h-91a10,10,0,0,1,-10,-10v-6a10,10,0,0,1,10,-10z" display="none"></path><g id="node_expander1" style="cursor: pointer;"><path id="kity_path_36" fill="white" stroke="gray" d="M332.5,33.5A6,6,0,1,1,320.5,33.5A6,6,0,1,1,332.5,33.5"></path><path id="kity_path_37" fill="none" stroke="gray" d="M322,33.5L331,33.5"></path></g><path id="node_outline2" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M336.5,20.5h106a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-106a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text2" fill="black"><text id="kity_text_33" text-rendering="inherit" font-size="14" dy=".8em" y="26.5" x="353.5">双右尖括号</text></g></g><g id="minder_node3"><g id="node_expander2" style="cursor: pointer;" display="none"><path id="kity_path_46" fill="white" stroke="gray" d="M485.5,33.5A6,6,0,1,1,473.5,33.5A6,6,0,1,1,485.5,33.5"></path><path id="kity_path_47" fill="none" stroke="gray"></path></g><path id="node_outline3" fill="none" stroke="none" d="M490.5,22.5h228a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-228a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text3" fill="black"><text id="kity_text_43" text-rendering="inherit" font-size="12" dy=".8em" y="27.5" x="495.5">模板实例化时，右尖括号间不在需要空格</text></g></g><g id="minder_node4"><path id="kity_path_184" fill="rgba(0, 0, 0, .25)" stroke="none" d="M352.5,141.5h106a10,10,0,0,1,10,10v6a10,10,0,0,1,-10,10h-106a10,10,0,0,1,-10,-10v-6a10,10,0,0,1,10,-10z" display="none"></path><g id="node_expander3" style="cursor: pointer;"><path id="kity_path_54" fill="white" stroke="gray" d="M332.5,149.5A6,6,0,1,1,320.5,149.5A6,6,0,1,1,332.5,149.5"></path><path id="kity_path_55" fill="none" stroke="gray" d="M322,149.5L331,149.5"></path></g><path id="node_outline4" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M336.5,136.5h118a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-118a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text4" fill="black"><text id="kity_text_51" text-rendering="inherit" font-size="14" dy=".8em" y="142.5" x="353.5">auto类型推导</text></g></g><g id="minder_node5"><g id="node_expander4" style="cursor: pointer;" display="none"><path id="kity_path_62" fill="white" stroke="gray" d="M497.5,97.5A6,6,0,1,1,485.5,97.5A6,6,0,1,1,497.5,97.5"></path><path id="kity_path_63" fill="none" stroke="gray"></path></g><path id="node_outline5" fill="none" stroke="none" d="M502.5,86.5h359a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-359a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text5" fill="black"><text id="kity_text_59" text-rendering="inherit" font-size="12" dy=".8em" y="91.5" x="507.5">auto声明的变量由编译器在编译时期推导，声明的变量必须初始化</text></g></g><g id="minder_node6"><g id="node_expander5" style="cursor: pointer;" display="none"><path id="kity_path_70" fill="white" stroke="gray" d="M497.5,149.5A6,6,0,1,1,485.5,149.5A6,6,0,1,1,497.5,149.5"></path><path id="kity_path_71" fill="none" stroke="gray"></path></g><path id="node_outline6" fill="none" stroke="none" d="M502.5,138.5h377a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-377a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text6" fill="black"><text id="kity_text_67" text-rendering="inherit" font-size="12" dy=".8em" y="143.5" x="507.5">声明为auto的变量不能从初始化表达式中带走cv(const,volatile)限定符</text></g></g><g id="minder_node7"><g id="node_expander6" style="cursor: pointer;" display="none"><path id="kity_path_78" fill="white" stroke="gray" d="M497.5,201.5A6,6,0,1,1,485.5,201.5A6,6,0,1,1,497.5,201.5"></path><path id="kity_path_79" fill="none" stroke="gray"></path></g><path id="node_outline7" fill="none" stroke="none" d="M502.5,190.5h574a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-574a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text7" fill="black"><text id="kity_text_75" text-rendering="inherit" font-size="12" dy=".8em" y="195.5" x="507.5">auto不能为函数形参类型，不能为结构体的非静态成员，不能作为模板参数，不能声明auto a[3]这样的数组</text></g></g><g id="minder_node8"><path id="kity_path_185" fill="rgba(0, 0, 0, .25)" stroke="none" d="M352.5,411.5h135a10,10,0,0,1,10,10v6a10,10,0,0,1,-10,10h-135a10,10,0,0,1,-10,-10v-6a10,10,0,0,1,10,-10z" display="none"></path><g id="node_expander7" style="cursor: pointer;"><path id="kity_path_86" fill="white" stroke="gray" d="M332.5,419.5A6,6,0,1,1,320.5,419.5A6,6,0,1,1,332.5,419.5"></path><path id="kity_path_87" fill="none" stroke="gray" d="M322,419.5L331,419.5"></path></g><path id="node_outline8" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M336.5,406.5h143a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-143a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text8" fill="black"><text id="kity_text_83" text-rendering="inherit" font-size="14" dy=".8em" y="412.5" x="353.5">decltype类型推导</text></g></g><g id="minder_node9"><g id="node_expander8" style="cursor: pointer;" display="none"><path id="kity_path_94" fill="white" stroke="gray" d="M522.5,263.5A6,6,0,1,1,510.5,263.5A6,6,0,1,1,522.5,263.5"></path><path id="kity_path_95" fill="none" stroke="gray"></path></g><path id="node_outline9" fill="none" stroke="none" d="M527.5,252.5h332a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-332a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text9" fill="black"><text id="kity_text_91" text-rendering="inherit" font-size="12" dy=".8em" y="257.5" x="532.5">deltypey以一个普通的表达式作为参数，返回该表达式的类型</text></g></g><g id="minder_node10"><g id="node_expander9" style="cursor: pointer;" display="none"><path id="kity_path_102" fill="white" stroke="gray" d="M522.5,315.5A6,6,0,1,1,510.5,315.5A6,6,0,1,1,522.5,315.5"></path><path id="kity_path_103" fill="none" stroke="gray"></path></g><path id="node_outline10" fill="none" stroke="none" d="M527.5,304.5h146a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-146a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text10" fill="black"><text id="kity_text_99" text-rendering="inherit" font-size="12" dy=".8em" y="309.5" x="532.5">deltype可以重用匿名类型</text></g></g><g id="minder_node11"><g id="node_expander10" style="cursor: pointer;"><path id="kity_path_110" fill="white" stroke="gray" d="M522.5,445.5A6,6,0,1,1,510.5,445.5A6,6,0,1,1,522.5,445.5"></path><path id="kity_path_111" fill="none" stroke="gray" d="M512,445.5L521,445.5"></path></g><path id="node_outline11" fill="none" stroke="none" d="M527.5,434.5h187a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-187a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text11" fill="black"><text id="kity_text_107" text-rendering="inherit" font-size="12" dy=".8em" y="439.5" x="532.5">decltype推导四规则：decltype(e)</text></g></g><g id="minder_node12"><g id="node_expander11" style="cursor: pointer;" display="none"><path id="kity_path_118" fill="white" stroke="gray" d="M759.5,367.5A6,6,0,1,1,747.5,367.5A6,6,0,1,1,759.5,367.5"></path><path id="kity_path_119" fill="none" stroke="gray"></path></g><path id="node_outline12" fill="none" stroke="none" d="M764.5,356.5h594a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-594a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text12" fill="black"><text id="kity_text_115" text-rendering="inherit" font-size="12" dy=".8em" y="361.5" x="769.5">e是一个不带圆括号标记符表达式或类成员访问表达式，decltype(e)就是e所命名的实体。e不能是一个重载函数</text></g></g><g id="minder_node13"><g id="node_expander12" style="cursor: pointer;" display="none"><path id="kity_path_126" fill="white" stroke="gray" d="M759.5,419.5A6,6,0,1,1,747.5,419.5A6,6,0,1,1,759.5,419.5"></path><path id="kity_path_127" fill="none" stroke="gray"></path></g><path id="node_outline13" fill="none" stroke="none" d="M764.5,408.5h385a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-385a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text13" fill="black"><text id="kity_text_123" text-rendering="inherit" font-size="12" dy=".8em" y="413.5" x="769.5">否则，假设e类型为T，如果e是一个将亡值(xvalue)，decltype(e)为T&amp;&amp;</text></g></g><g id="minder_node14"><g id="node_expander13" style="cursor: pointer;" display="none"><path id="kity_path_134" fill="white" stroke="gray" d="M759.5,471.5A6,6,0,1,1,747.5,471.5A6,6,0,1,1,759.5,471.5"></path><path id="kity_path_135" fill="none" stroke="gray"></path></g><path id="node_outline14" fill="none" stroke="none" d="M764.5,460.5h236a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-236a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text14" fill="black"><text id="kity_text_131" text-rendering="inherit" font-size="12" dy=".8em" y="465.5" x="769.5">否则，如果e是一个左值，decltype(e)为T&amp;</text></g></g><g id="minder_node15"><g id="node_expander14" style="cursor: pointer;" display="none"><path id="kity_path_142" fill="white" stroke="gray" d="M759.5,523.5A6,6,0,1,1,747.5,523.5A6,6,0,1,1,759.5,523.5"></path><path id="kity_path_143" fill="none" stroke="gray"></path></g><path id="node_outline15" fill="none" stroke="none" d="M764.5,512.5h126a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-126a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text15" fill="black"><text id="kity_text_139" text-rendering="inherit" font-size="12" dy=".8em" y="517.5" x="769.5">否则，decltype(e)为T</text></g></g><g id="minder_node16"><g id="node_expander15" style="cursor: pointer;" display="none"><path id="kity_path_150" fill="white" stroke="gray" d="M522.5,575.5A6,6,0,1,1,510.5,575.5A6,6,0,1,1,522.5,575.5"></path><path id="kity_path_151" fill="none" stroke="gray"></path></g><path id="node_outline16" fill="none" stroke="none" d="M527.5,564.5h580a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-580a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text16" fill="black"><text id="kity_text_147" text-rendering="inherit" font-size="12" dy=".8em" y="569.5" x="532.5">decltype可以带走cv限定符，不过对象的定义中有cv限定符，使用decltype推导时，其成员不会继承cv限定符</text></g></g><g id="minder_node17"><path id="kity_path_186" fill="rgba(0, 0, 0, .25)" stroke="none" d="M352.5,631.5h108a10,10,0,0,1,10,10v6a10,10,0,0,1,-10,10h-108a10,10,0,0,1,-10,-10v-6a10,10,0,0,1,10,-10z" display="none"></path><g id="node_expander16" style="cursor: pointer;"><path id="kity_path_158" fill="white" stroke="gray" d="M332.5,639.5A6,6,0,1,1,320.5,639.5A6,6,0,1,1,332.5,639.5"></path><path id="kity_path_159" fill="none" stroke="gray" d="M322,639.5L331,639.5"></path></g><path id="node_outline17" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M336.5,626.5h120a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-120a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text17" fill="black"><text id="kity_text_155" text-rendering="inherit" font-size="14" dy=".8em" y="632.5" x="353.5">追踪返回类型</text></g></g><g id="minder_node18"><g id="node_expander17" style="cursor: pointer;" display="none"><path id="kity_path_166" fill="white" stroke="gray" d="M499.5,639.5A6,6,0,1,1,487.5,639.5A6,6,0,1,1,499.5,639.5"></path><path id="kity_path_167" fill="none" stroke="gray"></path></g><path id="node_outline18" fill="none" stroke="none" d="M504.5,628.5h588a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-588a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text18" fill="black"><text id="kity_text_163" text-rendering="inherit" font-size="12" dy=".8em" y="633.5" x="509.5">原本函数返回值类型用auto占据，在参数声明之后用-&gt;return_type声明返回值类型，如：auto returnInt() -&gt; int</text></g></g><g id="minder_node19"><path id="kity_path_187" fill="rgba(0, 0, 0, .25)" stroke="none" d="M352.5,697.5h142a10,10,0,0,1,10,10v6a10,10,0,0,1,-10,10h-142a10,10,0,0,1,-10,-10v-6a10,10,0,0,1,10,-10z" display="none"></path><g id="node_expander18" style="cursor: pointer;"><path id="kity_path_174" fill="white" stroke="gray" d="M332.5,705.5A6,6,0,1,1,320.5,705.5A6,6,0,1,1,332.5,705.5"></path><path id="kity_path_175" fill="none" stroke="gray" d="M322,705.5L331,705.5"></path></g><path id="node_outline19" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M336.5,692.5h149a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-149a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text19" fill="black"><text id="kity_text_171" text-rendering="inherit" font-size="14" dy=".8em" y="698.5" x="353.5">基于范围的for循环</text></g></g><g id="minder_node20"><g id="node_expander19" style="cursor: pointer;" display="none"><path id="kity_path_182" fill="white" stroke="gray" d="M528.5,705.5A6,6,0,1,1,516.5,705.5A6,6,0,1,1,528.5,705.5"></path><path id="kity_path_183" fill="none" stroke="gray"></path></g><path id="node_outline20" fill="none" stroke="none" d="M533.5,694.5h146a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-146a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text20" fill="black"><text id="kity_text_179" text-rendering="inherit" font-size="12" dy=".8em" y="699.5" x="538.5">类似其他语言的for-in循环</text></g></g></g></g></svg>